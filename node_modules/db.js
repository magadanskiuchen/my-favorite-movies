var that;
var connection;
var dbName = config.db.name;

// helper function (private method)
function getQueryOptions(entry) {
	var fields = [];
	var values = [];
	
	for (var p in entry) {
		fields.push(p);
		values.push(entry[p]);
	}
	
	var placeholder = Array(values.length + 1).join('?').split('').join(', ');
	
	return { fields: fields, values: values, placeholder: placeholder };
}

function buildWhereStatement(where) {
	var checks = [];
	
	for (var p in where) {
		checks.push('`' + p + '` = ' + connection.escape(where[p]));
	}
	
	return checks.join(' AND ');
}

function DB() {
	EventEmitter.call(this);
	
	that = this;
	
	connection = mysql.createConnection({ host: config.db.host, user: config.db.user, password: config.db.pass });
	connection.connect();
	
	that.on('selected', that.checkTables);
	
	that.selectDatabase();
}

util.inherits(DB, EventEmitter);

DB.prototype.onError = function (err, message) {
	console.log(message, err);
}

DB.prototype.selectDatabase = function (name) {
	if (typeof(name) !== 'undefined') {
		dbName = name;
	}
	
	connection.query('USE `' + dbName + '`', function (err, rows, fields) {
		if (err) {
			that.onError(err, 'Error selecting database "' + dbName + '"');
		} else {
			that.emit('selected', rows, fields);
		}
	});
}

DB.prototype.checkTables = function () {
	connection.query('SHOW TABLES', function (err, rows, fields) {
		if (err) {
			that.onError(err, 'Error listing tables for "' + dbName + '"');
		} else {
			if (!rows.length) {
				that.emit('beforeInstall', dbName);
				
				var query = connection.query(
					"CREATE TABLE IF NOT EXISTS `movies` (\
						`id` int(10) unsigned NOT NULL AUTO_INCREMENT,\
						`imdbId` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\
						`title` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\
						`directors` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,\
						`rating` smallint(6) DEFAULT NULL,\
						`imdb_rating` float(2,1) DEFAULT NULL,\
						`runtime` smallint(6) DEFAULT NULL,\
						`year` varchar(255) COLLATE utf8_unicode_ci NOT NULL,\
						`release_date` date DEFAULT NULL,\
						PRIMARY KEY (`id`),\
						UNIQUE KEY `imdbId` (`imdbId`),\
						KEY `rating` (`rating`,`Year`)\
					) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci AUTO_INCREMENT=1;",
					function (err, rows, fields) {
						if (err) {
							that.onError(query, err, 'Could not setup database');
						}
					}
				)
				that.emit('afterInstall', dbName);
			}
			
			that.emit('ready', dbName);
		}
	});
}

DB.prototype.insert = function (table, entry, callback) {
	var query = connection.query("INSERT INTO `" + table + "` SET ?", entry, function (err, rows, fields) {
		if (err) {
			console.log(query, entry);
			that.onError(err, 'Could not add entry');
		} else {
			callback(rows, fields);
		}
	});
}

DB.prototype.select = function (table, where, callback) {
	var whereStatement = buildWhereStatement(where);
	
	var query = connection.query("SELECT * FROM `" + table + "` WHERE " + whereStatement, function (err, rows, fields) {
		if (err) {
			console.log(query, table, where);
			that.onError(err, 'Could not retrieve data');
		} else {
			callback(rows, fields);
		}
	});
}

DB.prototype.update = function (table, update, where, callback) {
	var whereStatement = buildWhereStatement(where);
	
	var query = connection.query("UPDATE `" + table + "` SET ? WHERE " + whereStatement, update, function (err, rows, fields) {
		if (err) {
			console.log(query, table, update, where);
			that.onError(err, 'Could not update entry');
		} else {
			callback(rows, fields);
		}
	});
}

module.exports = DB;