var that;

function parseReleaseDate(input, title) {
	var date = false;
	
	if (input.match(/^\d{4}\-\d{2}\-\d{2}$/)) {
		date = input;
	}
	
	if (!date) {
		that.write('Improper date for "' + title + '": ' + input);
		that.write('Enter date as YYYY-MM-DD');
		
		process.stdin.resume();
		var response = fs.readSync(process.stdin.fd, 100, 0, "utf8")[0];
		process.stdin.pause();
		
		response = response.replace(/^\s*/, '').replace(/\s*$/, '');
		console.log('"' + response + '"', response.length);
		
		date = parseReleaseDate(response, title);
	}
	
	return date;
}

function MyFavoriteMovies() {
	EventEmitter.call(this);
	
	that = this;
	
	db.on('ready', that.init);
	
	// process.stdin.on('data', function (text) {
	// 	text = text.replace(/^\s*/, '').replace(/\s*$/, '');
		
	// 	that.write('');
		
	// 	switch (text) {
	// 		case 'help':
	// 			that.write('help\topens this menu');
	// 			that.write('');
	// 			break;
	// 		case 'quit':
	// 			that.quit();
	// 			break;
	// 	}
	// });
}

util.inherits(MyFavoriteMovies, EventEmitter);

MyFavoriteMovies.prototype.usage = 'usage: index.js <command> [parameters]';
MyFavoriteMovies.prototype.moreInformation = 'Type "index.js help" for more information.';

MyFavoriteMovies.prototype.write = function (msg) {
	process.stdout.write(msg + '\n');
}

MyFavoriteMovies.prototype.init = function () {
	if (typeof(process.argv[2]) !== 'undefined') {
		switch(process.argv[2]) {
			case 'help':
				that.write(that.usage);
				that.write('');
				that.write('help\tshows this list');
				that.write('import\t[relative_path] parses an IMDB export CSV file and imports it into the database.');
				
				that.exit();
				break;
			case 'import':
				if (typeof(process.argv[3]) !== 'undefined') {
					that.import(process.argv[3]);
				} else {
					that.write('The "import" command requires a parameter, which should be the relative path to the CSV file to be imported.');
					that.write('usage: index.js import "path/to/file.csv"');
					
					that.exit();
				}
				break;
			default:
				that.write(process.argv[2] + ' is not a supported action.');
				that.write(that.moreInformation);
				that.write(that.usage);
				
				that.exit();
				break;
		}
	} else {
		that.write('Action must be specified.');
		that.write(that.moreInformation);
	}
	
	// process.stdin.resume();
	// process.stdin.setEncoding('utf8');
	// that.write('Waiting for instructions. Type "help" for more informtion.\n');
}

MyFavoriteMovies.prototype.import = function (path) {
	csv.fromPath(path).on('record', function (data) {
		if (data[0] == 'position') {
			return; // skip header row
		}
		
		/*
		{
			id: null,
			const: 1,
			title: 5,
			directors: 7,
			rating: 8*10,
			imdb_rating: 9,
			runtime: 10,
			year: 11,
			release_date: 14
		}
		*/
		
		var entry = {
			id: null,
			const: data[1],
			title: data[5],
			directors: data[7],
			rating: parseInt(data[8]) * 10,
			imdb_rating: data[9],
			runtime: data[10],
			year: data[11],
			release_date: parseReleaseDate(data[14], data[5])
		}
		
		console.log(entry);
		// that.exit();
	}).on('end', function () {
		console.log('import complete');
		that.exit();
	});
}

MyFavoriteMovies.prototype.exit = function (code) {
	if (typeof(code) == 'undefined') {
		code = 0;
	}
	
	process.exit(code);
}

module.exports = MyFavoriteMovies;